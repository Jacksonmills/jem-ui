{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "dependencies": ["@base-ui-components/react"],
  "files": [
    {
      "path": "registry/ui/button.tsx",
      "content": "'use client';\n\nimport * as React from \"react\";\nimport { useRender } from '@base-ui-components/react/use-render';\nimport { mergeProps } from '@base-ui-components/react/merge-props';\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-hidden focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-2xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-2xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-2xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-2xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const defaultProps: useRender.ElementProps<'button'> & {\n    'data-slot': string;\n  } = {\n    className: cn(buttonVariants({ variant, size, className })),\n    'data-slot': 'button',\n  };\n\n  const getRender = () => {\n    if (asChild) {\n      if (!React.isValidElement(props.children) || React.Children.count(props.children) !== 1) {\n        throw new Error(\"Button component expects exactly one React element as a child when 'asChild' is true.\");\n      }\n      return props.children as React.JSX.Element;\n    }\n    return <button />;\n  };\n\n  const { renderElement } = useRender({ render: getRender(), props: mergeProps<'button'>(defaultProps, props) });\n\n  return renderElement();\n}\n\nexport { Button, buttonVariants };",
      "type": "registry:ui"
    }
  ]
}
